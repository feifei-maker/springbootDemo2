一、选择题（共12小题，每小题2.5分，共30分）
	以下不是spring boot优点的是 ( D )
		A．快速搭建项目
		B．简化配置  
		C．自动配置  
		D．无需容器
	Spring Boot配置，以下哪个优先级最高（ A）
		A、外置：xx.jar同目录下/config/application.properties；
		B、外置：xx.jar同目录下/config/application.yml；
		C、内置：src/main/resources/config；
		D、内置：src/main/resources
	以下log日志级别哪个最高（A）
		A、DEBUG
		B、INFO
		C、WARN
		D、ERROR
	以下不是spring boot的核心注解的是 (D  )
		A.	@SpringBootConfiguration
		B.	@EnableAutoConfiguration
		C.	@ComponentScan
		D.	@MapperScan
	要使用springMVC的功能，需要导入那个包 (C  )
		A．spring-boot-starter-jdbc  
		B．spring-boot-starter-thymeleaf  
		C．spring-boot-starter-web  
		D．mybatis-spring-boot-starter
	以下哪个注解不能加在类上 ( B )
		A.	@Controller
		B.	@ResponseBody
		C.	@RestController
		D.	@RequestMapping
	当控制层上有@RestController注解时，方法中返回一个字符串“<h1>Hello</h1>”，浏览器调用的结果是 (A  )
		A. 一级标题显示的Hello
		B.	找不到Hello.html
		C.	<h1>Hello</>
		D.	Hello
	SpringBoot项目中配置文件的格式 ( C )
		A．properties  
		B．yml  
		C．两者都可以
	不是SpringBoot核心配置文件是（B）
		A.	bootstrap
		B.	application
		C.	application-dev
	前台使用json参数格式，控制器consumer、参数使用的注解是（A）
		A、application/josn ---- @RequestBody
		B、application/josn ---- @ModelAttribute
		C、application/x-www-form-urlencoded ---- @RequestBody
		D、application/x-www-form-urlencoded ---- @ModelAttribute
	@Pointcut("execution(public * com.thornBird.sbd.modules.*.controller.*.*(..))")，第三个*代表（C）
		A、代表返回类型不限
		B、代表module下所有子包
		C、代表所有类
		D、代表所有方法
	Url匹配风格中/admin*，以下哪个匹配不正确（D）
		A、/admin
		B、/admin1
		C、/admin123
		D、/admin/1
	Mybatis框架中，插入数据使用那个注解（B）
		A、@Update
		B、@Insert
		C、@Select
		D、@InsertMapping

二、填空题（共5小题，每小题5分，共25分）
	获取配置文件的属性值，使用哪个注解_____@Value___________；
	Java配置依赖的2个注解是___@Configuration_______，____@Component_______;
	Spring Boot修改tomcat端口号为9090应该怎么写？___server.port=9090_________;
	自定义拦截器需要实现___HandlerInterceptor_____接口；
	过滤器需要使用___@WebFilter______注解;
	上传文件，使用__MultipartFile__接收文件对象，consumer使用_multipart/form-data____;

三、问答题（每题5分，共25分）
	阐述 Spring Boot 特性，举一个例子来解释 Staters 的内容；
	答：1、快速开发；2、简化了配置，不再需要配置繁杂的配置文件；3、内嵌有servlet容器；
	      Staters ：由于坚信“习惯优于配置”，所以包装了常用的配置
	Mybatis传参中，#{*}、${*}的区别？
	答：#{*}底层使用的是预编译（PreparedStatement）处理,可以防止SQL注入，更加安全；
	      ${*}是平常的处理方式，没有前者更安全

	简述Restful规则？
	答：查询：GET;    增加：POST;   修改：PUT；   删除：DELETE

	简述Git使用流程，写几个常用Git命令？
	答：先将项目设置为GIt可以控制的，然后将有改变的文件commit到本地仓库，最后push到远程仓库中
	git add;	git commit -m; git push origin;

	简述shiro两大功能实现流程；
	答：
   	    身份验证过程:
		用户登录 ---- 产生包装令牌（用户名、密码、记住我） ----  realm产生包装身份验证器 ---- 身份验证器和令牌做比对（用户名和密码的比对）
  	   资源授权流程:
		用户登录 ----- subject调用 checkroles（） ---- 跳转页面 ---- 当页面有 shiro 标签 或者方法上有 shiro 注解时候 ---- 调用 realm 里面的资源授权器 ---- 资源授权器和标签或注解上的内容做比对

四、编程题（每题10分，共20分）
	1、提供一个接口，返回 List<User> 列表，对该列表进行排序、保留10条数据；页面端使用 ajax post 方式提交请求，包装查询参数，获取接口返回数据，并遍历数据渲染到页面上 table 表格中；
	controller层：
	@PostMapping(value = "/users", consumes = MediaType.APPLICATION_JSON_VALUE)
    		public PageInfo<User> getUsersBySearchVo(@RequestBody SearchVo searchVo) {
        		return userService.getUsersBySearchVo(searchVo);
   	 }
	service层：
	 public PageInfo<User> getUsersBySearchVo(SearchVo searchVo) {
        		searchVo.initSearchVo();
		searchVo.setPageSize(10);
       		 PageHelper.startPage(searchVo.getCurrentPage(), searchVo.getPageSize());
        		return new PageInfo<User>(Optional
                		.ofNullable(userDao.getUsersBySearchVo(searchVo))
               			 .orElse(Collections.emptyList()));
	    }
	dao层：
	@Select("<script>" +
           	 "select * from user "
           	 + "<where> "
            	+ "<if test='keyWord != \"\" and keyWord != null'>"
            	+ " and (user_name like '%${keyWord}%') "
            	+ "</if>"
            	+ "</where>"
            	+ "<when test='orderBy != \"\" and orderBy != null'>"
            	+ " order by ${orderBy} ${sort}"
            	+ "</when>"
            	+ "</script>")
  	 List<User> getUsersBySearchVo(SearchVo searchVo);
	页面前端：
	$.ajax({
                    url: "/api/users",
                    type: "post",
                    contentType: "application/json",
                    data: JSON.stringify(searchVo),
                    success: function (rs) {
	        layer.alert(“成功”）
		}，
	error: function () {
                        layer.alert(data.responseText, {icon: 0});
                    }
	 });	
	2、设计一套购物车接口，以 Cookie 或者 redis 实现
